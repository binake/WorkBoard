{"version":3,"file":"database-DUu0X7Pl.js","sources":["../src/services/database.ts"],"sourcesContent":["import { Task } from '../types/task';\r\nimport { app } from 'electron';\r\nimport { join } from 'path';\r\nimport { existsSync, mkdirSync } from 'fs';\r\nimport { dirname } from 'path';\r\n\r\n// 使用 require 导入 better-sqlite3\r\nconst Database = require('better-sqlite3');\r\n\r\nconst isDev = process.env.NODE_ENV === 'development';\r\nconst dbPath = isDev \r\n  ? join(process.cwd(), 'tasks.db')\r\n  : join(app.getPath('userData'), 'tasks.db');\r\n\r\nconsole.log('Database path:', dbPath);\r\n\r\n// 确保数据库目录存在\r\nconst dbDir = dirname(dbPath);\r\nif (!existsSync(dbDir)) {\r\n  console.log('Creating database directory:', dbDir);\r\n  mkdirSync(dbDir, { recursive: true });\r\n}\r\n\r\nlet db;\r\n\r\ntry {\r\n  console.log('Initializing database at:', dbPath);\r\n  db = new Database(dbPath, { \r\n    verbose: console.log,\r\n    fileMustExist: false\r\n  });\r\n  \r\n  // 初始化数据库表\r\n  console.log('Creating tasks table if not exists');\r\n  const createTable = `\r\n    CREATE TABLE IF NOT EXISTS tasks (\r\n      id TEXT PRIMARY KEY,\r\n      title TEXT NOT NULL,\r\n      status TEXT NOT NULL,\r\n      createTime TEXT NOT NULL,\r\n      updateTime TEXT NOT NULL\r\n    )\r\n  `;\r\n  \r\n  db.prepare(createTable).run();\r\n  console.log('Database table initialized successfully');\r\n} catch (err) {\r\n  console.error('Database initialization error:', err);\r\n  throw err;\r\n}\r\n\r\nexport const taskDb = {\r\n  getAllTasks() {\r\n    try {\r\n      const stmt = db.prepare('SELECT * FROM tasks');\r\n      const tasks = stmt.all();\r\n      console.log('Retrieved tasks:', tasks);\r\n      return tasks;\r\n    } catch (err) {\r\n      console.error('Error getting all tasks:', err);\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  addTask(task: Task) {\r\n    try {\r\n      console.log('Adding task to database:', task);\r\n      \r\n      if (!task.id || !task.title || !task.status) {\r\n        throw new Error('Invalid task data');\r\n      }\r\n      \r\n      const stmt = db.prepare(`\r\n        INSERT INTO tasks (id, title, status, createTime, updateTime) \r\n        VALUES (@id, @title, @status, @createTime, @updateTime)\r\n      `);\r\n      \r\n      const params = {\r\n        id: task.id,\r\n        title: task.title,\r\n        status: task.status,\r\n        createTime: task.createTime,\r\n        updateTime: task.updateTime\r\n      };\r\n      \r\n      console.log('Executing SQL with params:', params);\r\n      \r\n      try {\r\n        const result = stmt.run(params);\r\n        console.log('SQL execution result:', result);\r\n        \r\n        if (result.changes !== 1) {\r\n          throw new Error('Failed to insert task');\r\n        }\r\n        \r\n        return result;\r\n      } catch (sqlError) {\r\n        console.error('SQL execution error:', sqlError);\r\n        throw new Error(`Database error: ${sqlError.message}`);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error in addTask:', err);\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  updateTaskStatus(taskId: string, status: string, updateTime: string) {\r\n    try {\r\n      const stmt = db.prepare(\r\n        'UPDATE tasks SET status = ?, updateTime = ? WHERE id = ?'\r\n      );\r\n      return stmt.run(status, updateTime, taskId);\r\n    } catch (err) {\r\n      console.error('Error updating task status:', err);\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  deleteTask(taskId: string) {\r\n    try {\r\n      const stmt = db.prepare('DELETE FROM tasks WHERE id = ?');\r\n      return stmt.run(taskId);\r\n    } catch (err) {\r\n      console.error('Error deleting task:', err);\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  updateTask(task: Task) {\r\n    try {\r\n      console.log('Updating task in database:', task);\r\n      \r\n      if (!task.id || !task.title || !task.status) {\r\n        throw new Error('Invalid task data');\r\n      }\r\n      \r\n      const stmt = db.prepare(`\r\n        UPDATE tasks \r\n        SET title = @title, \r\n            status = @status, \r\n            updateTime = @updateTime \r\n        WHERE id = @id\r\n      `);\r\n      \r\n      const params = {\r\n        id: task.id,\r\n        title: task.title,\r\n        status: task.status,\r\n        updateTime: task.updateTime\r\n      };\r\n      \r\n      console.log('Executing SQL with params:', params);\r\n      const result = stmt.run(params);\r\n      console.log('Update result:', result);\r\n      \r\n      if (result.changes !== 1) {\r\n        throw new Error('Failed to update task');\r\n      }\r\n      \r\n      return result;\r\n    } catch (err) {\r\n      console.error('Error updating task:', err);\r\n      throw err;\r\n    }\r\n  }\r\n}; "],"names":["Database","isDev","dbPath","join","app","dbDir","dirname","existsSync","mkdirSync","db","err","taskDb","tasks","task","stmt","params","result","sqlError","taskId","status","updateTime"],"mappings":"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"}