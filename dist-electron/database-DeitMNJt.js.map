{"version":3,"file":"database-DeitMNJt.js","sources":["../src/services/database.ts"],"sourcesContent":["import { Task } from '../types/task';\r\nimport { app } from 'electron';\r\nimport { join } from 'path';\r\nimport { existsSync, mkdirSync } from 'fs';\r\nimport { dirname } from 'path';\r\n\r\n// 使用 require 导入 better-sqlite3\r\nconst Database = require('better-sqlite3');\r\n\r\nconst isDev = process.env.NODE_ENV === 'development';\r\nconst dbPath = isDev \r\n  ? join(process.cwd(), 'tasks.db')\r\n  : join(app.getPath('userData'), 'tasks.db');\r\n\r\nconsole.log('Database path:', dbPath);\r\n\r\n// 确保数据库目录存在\r\nconst dbDir = dirname(dbPath);\r\nif (!existsSync(dbDir)) {\r\n  console.log('Creating database directory:', dbDir);\r\n  mkdirSync(dbDir, { recursive: true });\r\n}\r\n\r\nlet db;\r\n\r\ntry {\r\n  console.log('Initializing database at:', dbPath);\r\n  db = new Database(dbPath, { \r\n    verbose: console.log,\r\n    fileMustExist: false\r\n  });\r\n  \r\n  // 初始化数据库表\r\n  console.log('Creating tasks table if not exists');\r\n  const createTable = `\r\n    CREATE TABLE IF NOT EXISTS tasks (\r\n      id TEXT PRIMARY KEY,\r\n      title TEXT NOT NULL,\r\n      status TEXT NOT NULL,\r\n      createTime TEXT NOT NULL,\r\n      updateTime TEXT NOT NULL\r\n    )\r\n  `;\r\n  \r\n  db.prepare(createTable).run();\r\n  console.log('Database table initialized successfully');\r\n} catch (err) {\r\n  console.error('Database initialization error:', err);\r\n  throw err;\r\n}\r\n\r\nexport const taskDb = {\r\n  getAllTasks() {\r\n    try {\r\n      const stmt = db.prepare('SELECT * FROM tasks');\r\n      const tasks = stmt.all();\r\n      console.log('Retrieved tasks:', tasks);\r\n      return tasks;\r\n    } catch (err) {\r\n      console.error('Error getting all tasks:', err);\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  addTask(task: Task) {\r\n    try {\r\n      console.log('Adding task to database:', task);\r\n      \r\n      if (!task.id || !task.title || !task.status) {\r\n        throw new Error('Invalid task data');\r\n      }\r\n      \r\n      const stmt = db.prepare(`\r\n        INSERT INTO tasks (id, title, status, createTime, updateTime) \r\n        VALUES (@id, @title, @status, @createTime, @updateTime)\r\n      `);\r\n      \r\n      const params = {\r\n        id: task.id,\r\n        title: task.title,\r\n        status: task.status,\r\n        createTime: task.createTime,\r\n        updateTime: task.updateTime\r\n      };\r\n      \r\n      console.log('Executing SQL with params:', params);\r\n      \r\n      try {\r\n        const result = stmt.run(params);\r\n        console.log('SQL execution result:', result);\r\n        \r\n        if (result.changes !== 1) {\r\n          throw new Error('Failed to insert task');\r\n        }\r\n        \r\n        return result;\r\n      } catch (sqlError) {\r\n        console.error('SQL execution error:', sqlError);\r\n        throw new Error(`Database error: ${sqlError.message}`);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error in addTask:', err);\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  updateTaskStatus(taskId: string, status: string, updateTime: string) {\r\n    try {\r\n      const stmt = db.prepare(\r\n        'UPDATE tasks SET status = ?, updateTime = ? WHERE id = ?'\r\n      );\r\n      return stmt.run(status, updateTime, taskId);\r\n    } catch (err) {\r\n      console.error('Error updating task status:', err);\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  deleteTask(taskId: string) {\r\n    try {\r\n      const stmt = db.prepare('DELETE FROM tasks WHERE id = ?');\r\n      return stmt.run(taskId);\r\n    } catch (err) {\r\n      console.error('Error deleting task:', err);\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  updateTask(task: Task) {\r\n    try {\r\n      console.log('Updating task in database:', task);\r\n      \r\n      if (!task.id || !task.title || !task.status) {\r\n        throw new Error('Invalid task data');\r\n      }\r\n      \r\n      const stmt = db.prepare(`\r\n        UPDATE tasks \r\n        SET title = @title, \r\n            status = @status, \r\n            updateTime = @updateTime \r\n        WHERE id = @id\r\n      `);\r\n      \r\n      const params = {\r\n        id: task.id,\r\n        title: task.title,\r\n        status: task.status,\r\n        updateTime: task.updateTime\r\n      };\r\n      \r\n      console.log('Executing SQL with params:', params);\r\n      const result = stmt.run(params);\r\n      console.log('Update result:', result);\r\n      \r\n      if (result.changes !== 1) {\r\n        throw new Error('Failed to update task');\r\n      }\r\n      \r\n      return result;\r\n    } catch (err) {\r\n      console.error('Error updating task:', err);\r\n      throw err;\r\n    }\r\n  }\r\n}; "],"names":["join","app","dirname","existsSync","mkdirSync"],"mappings":"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"}